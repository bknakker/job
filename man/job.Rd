% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/job.R
\encoding{UTF-8}
\name{job}
\alias{job}
\title{Run Code as an RStudio Job}
\usage{
job(..., import = ls(), packages = .packages(), opts = options(), title = NULL)
}
\arguments{
\item{...}{A named or unnamed code block enclosed in curly brackets, \code{{}}.
Unnamed code blocks will assign job variables directly to \code{globalenv()}
upon completion. This means that if you add \code{rm(list = ls())} to as the
last line of code, nothing is returned.

Named code blocks will assign the that name in \code{globalenv()}.}

\item{import}{A vector of un-quoted variables to import into the job. E.g.,
\code{c(var1, var2)}. \code{ls()} (default) means "all" and \code{c()} is "nothing".}

\item{packages}{Character vector of packages to load in the job. Defaults to
all loaded packages in the calling environment. You can achieve the same
effect by writing \code{library(my_package)} in the code block.}

\item{opts}{List of options to overwrite in the job. Defaults to \code{options()},
i.e., copy all options to the job. \code{NULL} uses defaults.}

\item{title}{The job title. You can write e.g., \code{"Cross-Validation: {code}"} to
show some code in the title. If \code{title = NULL} (default), the name of the
code chunk is used. If \code{...} unnamed, code is shown.}
}
\value{
Silently returns the job id on which you can call
\verb{rstudioapi::rstudioapi::jobRemove(job_id)} etc.
}
\description{
See examples for an introduction. See details for some warnings.
}
\details{
This is a wrapper around \code{rstudioapi::jobRunScript}. Some tips:
\itemize{
\item \strong{Large objects:}\code{jobRunScript} is very
slow at importing and exporting large objects. For exporting back into
\code{globalenv()}, it may be faster to \code{saveRDS()} results within the job and
\code{readRDS()} them in your environment.
\item \strong{Deletes import-names:} Upon completion, all variables with names in \code{import}
are deleted to speed up return. Avoid assigning variable names that are imported.
}
}
\examples{
if (rstudioapi::isAvailable()) {
  # Unnamed code chunks returns to globalenv()
  global_var = 5
  job::job({
    x = rnorm(global_var)
    print("This text goes to the job console")
    m = mean(x)
  })

  # later:
  print(x)
  print(m)


  # Named code chunks assign job environment to that name
  job::job(my_result = {
    y = rnorm(global_var)
    sigma = sd(y)
  }, title = "This is my title: {code}")

  # later:
  print(as.list(my_result))


  # Delete everything in the job environment to return nothing.
  # Useful if text output + file output is primary
  job::job({
    some_cars = mtcars[mtcars$cyl > 4, ]
    print(mean(some_cars$mpg))
    print(summary(some_cars))
    # saveRDS(some_cars, "job_result.rds")

    rm(list = ls())  # remove everything
  })


  # Control imports from calling environment (variables, packages, options)
  my_df = data.frame(names = c("alice", "bob"))
  ignore_var = 15
  job::job(result2 = {
    if (exists("ignore_var") == FALSE)
      print("ignore_var is not set here")

    names = rep(my_df$names, global_var)
  }, import = c(global_var, my_df), packages = NULL, options = list(mc.cores = 3))

  # later
  print(result2$names)
}
}
\seealso{
\code{\link[rstudioapi]{jobRunScript}}
}
\author{
Jonas Kristoffer Lindel√∏v, \email{jonas@lindeloev.dk}
}
